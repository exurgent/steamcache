user www;
worker_processes auto;

events 
{
    worker_connections  1024;
}


http 
{
	proxy_cache_path /storagepool/cache use_temp_path=off keys_zone=steamcache:100m max_size=100g inactive=365d levels=1:2;
	proxy_cache_revalidate on;
	proxy_cache_lock on;
        proxy_http_version 1.1;
        proxy_cache_valid  200 206 100d;

	proxy_buffering	off;
	proxy_request_buffering off;
	proxy_max_temp_file_size 0;


	proxy_cache_key $host$uri$is_args$args$slice_range;
	slice 1m;
	proxy_set_header   Range $slice_range;
	
	log_format nginx_cache '$upstream_cache_status: $remote_addr - $remote_user [$time_local] '
				'"$request_method $host$request_uri" $status $body_bytes_sent';

	log_format full '$remote_addr - $remote_user [$time_local] '
                    '"$request_method $host$request_uri" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

	access_log	/var/log/nginx/access.log nginx_cache;
	error_log	/var/log/nginx/error.log;

	sendfile        on;
	#tcp_nopush     on;
	aio		on;

	resolver 213.73.91.35 85.214.20.141 85.214.73.63 130.255.73.90; 

        # All servers which do not require any shenanigans
	server
        {
                server_name 	client-download.steampowered.com
				pls.patch.station.sony.com
				pls.patch.daybreakgames.com
				content.warframe.com
				level3.blizzard.com
                listen 3129;

                location /
                {
                        proxy_cache steamcache;

			proxy_pass      http://$host$request_uri;
                }
        }
	
	# Steam uses subdomains like valve123 and valve456 serving identical files. Also includes some arguments in the URI which break caching
        server
        {
                server_name     ~^valve\d+\.steamcontent\.com;
                listen          3129;

                #steam already  serves neat little chunks
                slice           0;
                proxy_cache_key valveX.steamcontent.com$uri;

                location /
                {
                        proxy_cache steamcache;

                        proxy_pass      http://$host$request_uri;

                }
        }
        server
        {
                server_name     ~^media[1-9].steampowered.com;
                listen          3129;

                proxy_cache_key mediaX.steampowered.com$uri$is_args$args$slice_range;

                location /client
                {
                        proxy_cache steamcache;

			proxy_pass      http://$host$request_uri;
                }
        }

	# Blizzard
        server
        {
                server_name     ~^blzddist[1-9]-a\.akamaihd\.net;
                listen          3129;

                proxy_cache_key blzddistX-a.akamaihd.net$uri$is_args$args$slice_range;

                location /
                {
                        proxy_cache steamcache;

			proxy_pass      http://$host$request_uri;
                }
        }

	# ESO sends no-cache headers for no good reason
        server
        {
                server_name     *.patcher.elderscrollsonline.com;
                listen          3129;

		proxy_ignore_headers Cache-Control;
                
		location /
                {
                        proxy_cache steamcache;

			proxy_pass      http://$host$request_uri;
                }
        }
	
	#War Thunder
	server
        {
                server_name     ~^gaijin\.s-\d+\.clients\.cdnnow\.ru;
                listen          3129;

                proxy_cache_key  gaijin.s-X.clients.cdnnow.ru$uri$is_args$args$slice_range;

                location /
                {
                        proxy_cache steamcache;

			proxy_pass      http://$host$request_uri;
                }
        }

                }
        }



        server
        {
                listen 3130;
                location /nginx_status
                {
                        stub_status on;
                }

        }


 	server
	{
                listen		3129 default_server;
		#access_log	/var/log/nginx/access.log-nocache full;
		access_log 	off;
		slice		0;
                location /
		{
			proxy_pass      $scheme://$host$request_uri;

                }
        }
}

